 manufacturers will claim to have 64-bit or 128-bit WEP, which is somewhat
misleading, since 24 bits of each of these keys are the IV that is sent in
clear text. Technically, the shared secret portions of the keys are really only 40
or 104 bits long.
Again, the issue with WEP is not the RC4 Cipher—it’s how RC4 is implemented.

IV Collisions
When an IV is reused, we call this a collision. When a collision occurs, the
combination of the shared secret and the repeated IV results in a key stream
that has been used before. Since the IV is sent in clear text, an attacker who
keeps track of all the traffic can identify when collisions occur. A number of
attacks become possible upon the discovery of IV collisions.
A key stream attack is a method of deriving the key stream by analyzing
two packets derived from the same IV. Simply stated, XORing the two cipher
texts together will equal XORing the two plain texts together. Figure 3.4
shows this in detail.
In the upper left, we have taken 8 bits (plain text 1) and XORed them with
our key stream. This results in cipher text 1. In the upper right, we have
taken a different set of 8 bits (plain text 2), but XORed them with the same
key stream, which results in a second cipher text. You will notice that XORing
the two cipher texts together gives us a result equal to XORing the two
plain texts together. Therefore, if both cipher texts are known (presumably
Figure 3.4
A key stream
attack.
Plaintext1
: 11010011
Keystream3
:  10100110
Ciphertext1
: 01110101
Ciphertext1
: 01110101
Ciphertext2
:  10001011
11111110
Plaintext2
: 00101101
Keystream3
:  10100110
Ciphertext2
: 10001011
Plaintext1
: 11010011
Plaintext2
:  00101101
11111110
chapter 3.fm Page 35 Thursday, August 21, 2003 12:09 PM
Chapter 3 • WEP Vulnerabilities—Wired Equivalent Privacy?
36
captured from a sniffer) and one plain text is known, the second plain text
can be derived.
You may be wondering, “That’s cool, but how do I know the first plain text,
so I can derive the second plain text?” There are two ways. First, if you are
able to see the target machine from a computer on the Internet (or a compromised
host on the target LAN), you could send a packet to the target machine.
Since it comes from you, the plain text payload of the packet would be known.
You could identify the packet by forcing an unusual packet size and searching
for that size in your sniffer log data.
An alternative way to learn the plain text of a packet is to guess. A number
of TCP/IP protocols utilize known handshaking procedures. For example,
DHCP, ARP, and other broadcast packets use well-documented signatures.
Keep in mind that key stream attacks only work when IVs are repeated.
This is a major flaw in the implementation of WEP. Because the standard
does not define how to implement IVs, they are often repeated and it is perfectly
acceptable to reuse them. In fact, in order for an AP to remain compliant
with the standard, it must accept IVs that have been reused. This violates
a major tenet of RC4: It is unsafe to reuse the same key, ever! Keys should
never be reused or repeated.
Message Injection
Once a key stream is known, a new message can be constructed by taking the
new plain text and XORing it with the known key stream to create a new,
forged cipher text. Again, since the 802.11 standard does not require the IV
to change with every packet, each device must accept reused IVs.
For example, let’s say we know the plain text and cipher text for a particular
message. We could use this information to derive the key stream (Figure 3.5)
Using the key stream, we could take our own plain text and use the key
stream to forge a new cipher text. This packet could then be injected into the
network and decrypted by the target machine as a valid WEP packet (Figure
3.6).
chapter 3.fm Page 36 Thursday, August 21, 2003 12:09 PM
Authentication Spoofing
37
Authentication Spoofing
A variation of the packet injection attack is authentication spoofing. In order
to understand how this attack works, let’s take another look at the shared key
authentication process.
• Step 1—The client sends an authentication request to the AP.
• Step 2—The AP sends the client 128 bytes of challenge text.
• Step 3—The client encrypts the challenge text with its WEP key and
sends the challenge response back to the AP.
• Step 4—The AP uses its knowledge of the WEP key to validate the challenge
response and determine if the client does, in fact, know the shared
secret key.
• Step 5—The AP responds to the client with a success or failure message.
The problem here is that if an attacker can observe this negotiation process,
she will know the plain text (challenge text) and its associated cipher text (challenge
response). Using the message injection attack methodology, the attacker
could then derive the key stream, request authentication from the AP, and use
the same key stream on the challenge text to create a valid challenge response.
The attacker would then be authenticated to the AP even though she has no
knowledge of the WEP key. This attack works because the challenge text is
always 128 bytes and, again, because IVs can be repeated and reused.
Figure 3.5
Deriving a key stream.
Figure 3.6
Forging a new cipher
text.
Plaintext1
: 11010011
Ciphertext1
:  10100110
Keystream1
: 01110101
Plaintext2
: 00101101
Keystream1
:  01110101
Ciphertext2
: 01011000
chapter 3.fm Page 37 Thursday, August 21, 2003 12:09 PM
Chapter 3 • WEP Vulnerabilities—Wired Equivalent Privacy?
38
Brute Force Attacks
Another approach to determining the WEP key is to use brute force. The
shared secret portion of the WEP key is either 40 bits or 104 bits, depending
on which key strength you are using. Security researcher Tim Newsham discovered
that the key generators from some vendors are flawed. A brute force
attack on a 40-bit key using a weak key generator could take less than a minute
to crack.
Key generators enable a user to enter a simple pass phrase to generate the
key, instead of entering the key manually with hexadecimal numbers. A 40-bit
WEP key shared secret would require 10 hexadecimal numbers; a 104-bit
WEP key shared secret would require 26 hexadecimal numbers. As a convenience,
some vendors allow you to enter a pass phrase in ASCII that will generate
the 10 or 26 hexadecimal numbers for you. The use of a key generator is
completely proprietary and not part of any standard. However, note that several
different vendors all use the same key generation algorithm.
Tim Newsham discovered that there are a number of problems with the
key generators for several vendors. In one example, he noticed that for 40-bit
keys, part of the key generation process included a 32-bit seed used in a
PRNG. Because the highest bit of each ASCII character is always 0 and the
key generator relied on XORing ASCII values, Tim discovered that instead of
00:00:00:00 – ff:ff:ff:ff (32 bits) of possible seeds, only values 00:00:00:00 –
00:7f:7f:7f needed to be considered. This reduced the actual entropy of the
PRNG seed to 21 bits. Using a PIII/500 MHz laptop performing 60,000
guesses per second, Newsham was able to crack a 40-bit WEP key from a key
generator in 35 seconds.
The moral of the story: Don’t use key generators! Enter your WEP key
using manual hexadecimal numbers. When done in this manner, a 40-bit
WEP key would have taken 210 days to crack (not a terribly difficult task,
when attacked by a Linux cluster).
Alternatively, you can implement 104-bit WEP. Tim noted that the key
generator used for 104-bit WEP was not flawed. It was based on an MD-5
hash of the pass phrase. He estimated that a brute force of this key would
take 1019 years. Clearly, brute forcing a 104-bit key is a much more difficult
task then brute forcing a 40-bit key. When using WEP, always deploy the largest
key size available.
chapter 3.fm Page 38 Thursday, August 21, 2003 12:09 PM
Cracking WEP Keys
39
Cracking WEP Keys
Programs such as AirSnort, WEPCrack, and dweputils crack WEP keys based
on an attack described in a paper titled “Weaknesses in the Key Scheduling
Algorithm of RC4” written by Scott Fluhrer, Itsik Mantin, and Adi Shamir.
This paper identified certain IVs that leak information about the secret key.
In fact, there are large classes of these weak keys. If you can collect enough
cipher text that is derived from them, you can determine the secret key with
relatively little work. This assumes, however, that the attacker has knowledge
of the first few bytes of plain text. Interestingly enough, because of RFC 1042
(SNAP headers), all IP and ARP packets always start with 0xAA. Therefore,
the first few bytes of plain text are (almost) alw